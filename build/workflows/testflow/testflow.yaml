#      default: "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"
#     default: "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"

workflow:
  name: slack_notify_test

  match:
    conditions:
      - path: payload.mode
        operator: equals
        value: "test"
        id: is_test_mode
    condition_logic: is_test_mode

  payload_parser:
    - path: payload.mode
      var: mode
    - path: payload.user
      var: user
      absent_action: ignore

  context_variables:
    - name: channel
      type: string
      default: "#new-channel"
      description: "Default Slack channel for test notifications"

    - name: openai_key
      type: string
      default: "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"
      description: "OpenAI API key for chatbot interactions"

    - name: github_token
      type: string
      default: "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"
      description: "GitHub Token"

  context_modules:
    git:
      module: git_module.Git
      repo: "https://github.com/yuribernstein/testrepo.git"
      branch: "feature/{{ context.user }}"
      base_branch: "main"
      work_dir: "/tmp/gitops-{{ context.user }}"
      handle_existing_branch: "pull"

  steps:
# #tested
#     - id: render_file
#       type: action
#       action: context.git.add_file_from_template
#       input:
#         template: "env_config.yaml.j2"
#         destination: "envs/{{ context.user }}/config.yaml"
# # tested
#     - id: open_real_pr
#       type: action
#       action: context.git.open_pr
#       input:
#         title: "Provisioning PR for {{ context.user }}"
#         body: "This was automatically generated by the GitOps workflow."
#       register_output: git_pr_result
# # tested
#     - id: announce_pr_in_slack
#       type: action
#       action: slack_module.Slack.send_info_message
#       input:
#         channel: "{{ context.channel }}"
#         title: "ðŸš€ Pull Request Created"
#         color: "neutral"
#         message: >
#           A new PR was created: <{{ context.git_pr_result.url }}|View PR>
# # tested
#     - id: send_approval_link
#       type: approval
#       description: "Blocking request - approval to merge PR"
#       message: "Do you approve merging this PR?"
#       timeout_minutes: 60
#       delivery_step:
#         id: notify_approval_required
#         type: action
#         action: slack_module.Slack.send_info_message
#         input:
#           channel: "{{ context.channel }}"
#           title: "Approval Needed"
#           message: "Please approve to merge the PR: <{{ context.approval_link }}|Approve>"
#           color: "warning"
# # tested
#     - id: merge_pr_if_approved
#       type: action
#       action: context.git.merge_pr
#       terms:
#         rules:
#           - path: context.step_results.send_approval_link.status
#             operator: equals
#             value: "approved"
#             id: approved
#         logic: approved

# # tested
#     - id: notify_merge_complete
#       type: action
#       action: slack_module.Slack.send_info_message
#       input:
#         channel: "{{ context.channel }}"
#         title: "âœ… Pull Request Merged"
#         color: "good"
#         message: >
#           The PR <{{ context.git_pr_result.url }}|#{{ context.git_pr_result.pr_number }}> merge result {{ context.step_results.merge_pr_if_approved.status }}.
#       terms:
#         rules:
#           - path: context.step_results.send_approval_link.status
#             operator: equals
#             value: "approved"
#             id: approved
#         logic: approved          
# #tesed
#     - id: notify_user_email
#       type: action
#       action: email_module.Email.send_email
#       input:
#         to: "yuri.bernstein@gmail.com"
#         subject: "SeyoAwe Notification"
#         template: "notify_with_approval_link.j2"

# #tested
#     - id: send_email_approval_form
#       type: webform
#       module: webform
#       config_file: wf_config.js
#       css_file: custom.css
#       timeout_minutes: 120
#       delivery_step:
#         id: send_form_over_email
#         type: action
#         action: email_module.Email.send_email
#         input:
#           to: "yuri.bernstein@gmail.com"
#           subject: "Form Link to Fill"
#           template: "notify_with_approval_webform.j2"

#     # tested
    # - id: send_slack_approval_form
    #   type: webform
    #   module: webform
    #   config_file: wf_config.js
    #   css_file: custom.css
    #   delivery_step:
    #     id: send_form_over_slack
    #     type: action
    #     action: slack_module.Slack.send_info_message
    #     input:
    #       channel: "{{ context.channel }}"
    #       title: "Form Submission"
    #       message: "Please complete the form: <{{ context.approval_link }}|Open Form>"
    #       color: "warning"

# # tested
#     - id: submit_form_results
#       type: action
#       action: slack_module.Slack.send_info_message
#       input:
#         channel: "{{ context.channel }}"
#         title: "Form Submission Result"
#         flatten_form_result: true
#         keyed_message:
#           - key: "User"
#             value: "{{ context.user }}"
#           - key: "Approval"
#             value: "{{ context.step_results.send_slack_approval_form.status }}"
#           - key: "Form Data"
#             value: "{{ context.step_results.send_slack_approval_form | tojson }}"
# #tested
#     - id: test_api_call
#       type: action
#       action: api_module.API.call
#       input:
#         method: "GET"
#         url: "https://httpbin.org/get"
#         params:
#           query: "{{ context.user }}"
# #tested
#     - id: send_slack_api_result
#       type: action
#       action: slack_module.Slack.send_info_message
#       input:
#         channel: "{{ context.channel }}"
#         title: "API Call Result"
#         flatten_form_result: true
#         keyed_message:
#           - key: "User"
#             value: "{{ context.user }}"
#           - key: "API Result"
#             value: "{{ context.step_results.test_api_call | tojson }}"

    # - id: chatbot_feedback
    #   type: action
    #   action: chatbot_module.Chatbot.ask
    #   input:
    #     provider: "openai"
    #     model: "gpt-4"
    #     system_prompt: >
    #       You are a concise assistant that summarizes form submissions. 
    #       Remove boilerplate or empty sections.
    #     user_message: >
    #       Here's the submitted form data for user {{ context.user }}:
    #       {{ context.step_results.send_slack_approval_form.status.form_data | default({}) | tojson }}
    #     temperature: 0.6
    #     api_key: "{{ context.openai_key }}"
    #   register_output: chatbot_response

    # - id: send_chatbot_response
    #   type: action
    #   action: slack_module.Slack.send_info_message
    #   input:
    #     channel: "{{ context.channel }}"
    #     title: "Chatbot Feedback"
    #     message: "{{ context.chatbot_response.data.reply }}"
    #     color: "neutral"



#     - id: notify_status
#       type: action
#       action: slack_module.Slack.send_info_message
#       input:
#         channel: "{{ context.channel }}"
#         title: "ðŸ“¦ Git Repo Status"
#         keyed_message:
#           - key: "Branch"
#             value: "{{ context.git_status.current_branch }}"
#           - key: "Is Dirty?"
#             value: "{{ context.git_status.is_dirty }}"
#           - key: "Untracked Files"
#             value: "{{ context.git_status.untracked_files | tojson }}"

    - id: wait_for_http_200
      type: action
      action: api_module.API.blocking_call
      input:
        method: "GET"
        url: "https://httpbin.org/status/200"
        poll_interval_seconds: 5
        timeout_minutes: 1
        polling_mode: "status_code"
        expected_status_code: 200


    - id: notify_slack_of_http_200
      type: action
      action: slack_module.Slack.send_info_message
      input:
        channel: "{{ context.channel }}"
        title: "HTTP 200 Status"
        message: "The API returned a 200 status code."
        color: "good"
# tested
    - id: wait_for_ready_in_body
      type: action
      action: api_module.API.blocking_call
      input:
        method: "GET"
        url: "https://httpbin.org/get"
        params:
          status: "ready"
        poll_interval_seconds: 5
        timeout_minutes: 2
        polling_mode: "response_body"
        success_condition:
          path: "args.status"
          operator: "equals"
          value: "ready"
# tested
    - id: notify_slack_of_ready_status
      type: action
      action: slack_module.Slack.send_info_message
      input:
        channel: "{{ context.channel }}"
        title: "Ready Status"
        message: "The API returned 'ready' in the response body."
        color: "good"